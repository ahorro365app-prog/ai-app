/* Servicio para procesar texto transcrito usando Groq (API compatible con OpenAI)
   Requiere: NEXT_PUBLIC_GROQ_API_KEY en .env.local
*/

type GroqExtraction = {
  monto?: number | null;
  categoria?: string | null;
  tipo?: 'gasto' | 'ingreso' | null;
  descripcion?: string | null;
  metodoPago?: string | null;
  raw?: any;
};

export type GroqTransaction = {
  monto: number | null;
  categoria: string | null;
  tipo: 'gasto' | 'ingreso' | null;
  descripcion: string | null;
  metodoPago: string | null;
  esPagoDeuda?: boolean; // Nueva propiedad
  nombreDeuda?: string | null; // Nombre de la deuda si es un pago
  fechaTexto?: string | null; // Texto de fecha relativa (ej: "ayer", "hace 2 d√≠as")
};

type GroqMultipleResponse = {
  transacciones: GroqTransaction[];
  esMultiple: boolean;
};

const GROQ_API_KEY = process.env.NEXT_PUBLIC_GROQ_API_KEY || '';
const GROQ_ENDPOINT = 'https://api.groq.com/openai/v1/chat/completions';
const GROQ_MODEL = 'llama-3.1-8b-instant';

// Mapeo de pa√≠ses a zonas horarias
const countryTimezones: Record<string, string> = {
  'BO': 'America/La_Paz',      // Bolivia
  'AR': 'America/Argentina/Buenos_Aires', // Argentina
  'BR': 'America/Sao_Paulo',   // Brasil
  'CL': 'America/Santiago',    // Chile
  'CO': 'America/Bogota',      // Colombia
  'EC': 'America/Guayaquil',   // Ecuador
  'PE': 'America/Lima',        // Per√∫
  'PY': 'America/Asuncion',    // Paraguay
  'UY': 'America/Montevideo',  // Uruguay
  'VE': 'America/Caracas',     // Venezuela
  'MX': 'America/Mexico_City', // M√©xico
  'US': 'America/New_York',    // Estados Unidos
  'EU': 'Europe/Berlin',       // Eurozona
};

// Funci√≥n auxiliar para obtener la fecha actual en zona horaria espec√≠fica del pa√≠s
function getCountryDate(countryCode: string = 'BO'): Date {
  const now = new Date();
  const timezone = countryTimezones[countryCode] || countryTimezones['BO']; // Default a Bolivia
  return new Date(now.toLocaleString("en-US", {timeZone: timezone}));
}

// Funci√≥n para procesar fechas relativas (m√°ximo 7 d√≠as atr√°s)
function processRelativeDate(dateText: string, userCountryCode: string = 'BO'): string | null | { error: string; message: string; daysDiff: number } {
  // Usar zona horaria espec√≠fica del pa√≠s del usuario para evitar problemas de UTC
  const today = new Date();
  const countryTime = getCountryDate(userCountryCode);
  const timezone = countryTimezones[userCountryCode] || countryTimezones['BO'];
  
  console.log('üìÖ processRelativeDate llamado con:', dateText);
  console.log('üìÖ Pa√≠s del usuario:', userCountryCode);
  console.log('üìÖ Zona horaria:', timezone);
  console.log('üìÖ Fecha actual UTC:', today.toISOString());
  console.log('üìÖ Fecha actual pa√≠s:', countryTime.toLocaleDateString('es-ES'));
  console.log('üìÖ D√≠a de la semana actual:', countryTime.toLocaleDateString('es-ES', { weekday: 'long' }));
  
  // Normalizar el texto
  const normalizedText = dateText.toLowerCase().trim();
  
  // Crear fecha en zona horaria del pa√≠s para evitar problemas de UTC
  const year = countryTime.getFullYear();
  const month = countryTime.getMonth();
  const day = countryTime.getDate();
  
  console.log('üìÖ Componentes de fecha actual:', { year, month, day });
  
  let targetDate: Date;
  
  // Mapeo de fechas relativas (m√°ximo 7 d√≠as atr√°s)
  if (normalizedText.includes('ayer') || normalizedText.includes('el d√≠a de ayer')) {
    console.log('üìÖ Detectado: ayer');
    // Crear fecha de ayer en zona horaria del pa√≠s
    targetDate = new Date(year, month, day - 1);
    console.log('üìÖ Fecha de ayer creada:', targetDate.toLocaleDateString('es-ES'));
    console.log('üìÖ D√≠a de la semana de ayer:', targetDate.toLocaleDateString('es-ES', { weekday: 'long' }));
  } else if (normalizedText.includes('hace 1 d√≠a') || normalizedText.includes('hace un d√≠a')) {
    targetDate = new Date(year, month, day - 1);
  } else if (normalizedText.includes('hace 2 d√≠as') || normalizedText.includes('hace dos d√≠as')) {
    targetDate = new Date(year, month, day - 2);
  } else if (normalizedText.includes('hace 3 d√≠as') || normalizedText.includes('hace tres d√≠as')) {
    targetDate = new Date(year, month, day - 3);
  } else if (normalizedText.includes('hace 4 d√≠as') || normalizedText.includes('hace cuatro d√≠as')) {
    targetDate = new Date(year, month, day - 4);
  } else if (normalizedText.includes('hace 5 d√≠as') || normalizedText.includes('hace cinco d√≠as')) {
    targetDate = new Date(year, month, day - 5);
  } else if (normalizedText.includes('hace 6 d√≠as') || normalizedText.includes('hace seis d√≠as')) {
    targetDate = new Date(year, month, day - 6);
  } else if (normalizedText.includes('hace una semana') || normalizedText.includes('hace 1 semana') || normalizedText.includes('hace 7 d√≠as')) {
    targetDate = new Date(year, month, day - 7);
  } else if (normalizedText.includes('hace 8 d√≠as')) {
    targetDate = new Date(year, month, day - 8);
  } else if (normalizedText.includes('hace 9 d√≠as')) {
    targetDate = new Date(year, month, day - 9);
  } else if (normalizedText.includes('hace 10 d√≠as')) {
    targetDate = new Date(year, month, day - 10);
  } else if (normalizedText.includes('hace 15 d√≠as')) {
    targetDate = new Date(year, month, day - 15);
  } else if (normalizedText.includes('hace 20 d√≠as')) {
    targetDate = new Date(year, month, day - 20);
  } else if (normalizedText.includes('hace 30 d√≠as')) {
    targetDate = new Date(year, month, day - 30);
  } else if (normalizedText.includes('hace 50 d√≠as')) {
    targetDate = new Date(year, month, day - 50);
  } else if (normalizedText.includes('hace 60 d√≠as')) {
    targetDate = new Date(year, month, day - 60);
  } else if (normalizedText.includes('hace 90 d√≠as')) {
    targetDate = new Date(year, month, day - 90);
  } else if (normalizedText.includes('hace 100 d√≠as')) {
    targetDate = new Date(year, month, day - 100);
  } else if (normalizedText.includes('hace ocho d√≠as')) {
    console.log('üìÖ Detectado: hace ocho d√≠as');
    targetDate = new Date(year, month, day - 8);
  } else if (normalizedText.includes('hace nueve d√≠as')) {
    console.log('üìÖ Detectado: hace nueve d√≠as');
    targetDate = new Date(year, month, day - 9);
  } else if (normalizedText.includes('hace diez d√≠as')) {
    console.log('üìÖ Detectado: hace diez d√≠as');
    targetDate = new Date(year, month, day - 10);
  } else if (normalizedText.includes('hace once d√≠as')) {
    console.log('üìÖ Detectado: hace once d√≠as');
    targetDate = new Date(year, month, day - 11);
  } else if (normalizedText.includes('hace doce d√≠as')) {
    console.log('üìÖ Detectado: hace doce d√≠as');
    targetDate = new Date(year, month, day - 12);
  } else if (normalizedText.includes('hace trece d√≠as')) {
    console.log('üìÖ Detectado: hace trece d√≠as');
    targetDate = new Date(year, month, day - 13);
  } else if (normalizedText.includes('hace catorce d√≠as')) {
    console.log('üìÖ Detectado: hace catorce d√≠as');
    targetDate = new Date(year, month, day - 14);
  } else if (normalizedText.includes('hace quince d√≠as')) {
    console.log('üìÖ Detectado: hace quince d√≠as');
    targetDate = new Date(year, month, day - 15);
  } else if (normalizedText.includes('hace veinte d√≠as')) {
    console.log('üìÖ Detectado: hace veinte d√≠as');
    targetDate = new Date(year, month, day - 20);
  } else if (normalizedText.includes('hace treinta d√≠as')) {
    console.log('üìÖ Detectado: hace treinta d√≠as');
    targetDate = new Date(year, month, day - 30);
  } else if (normalizedText.includes('hace cuarenta d√≠as')) {
    console.log('üìÖ Detectado: hace cuarenta d√≠as');
    targetDate = new Date(year, month, day - 40);
  } else if (normalizedText.includes('hace cincuenta d√≠as')) {
    console.log('üìÖ Detectado: hace cincuenta d√≠as');
    targetDate = new Date(year, month, day - 50);
  } else if (normalizedText.includes('hace sesenta d√≠as')) {
    console.log('üìÖ Detectado: hace sesenta d√≠as');
    targetDate = new Date(year, month, day - 60);
  } else if (normalizedText.includes('hace setenta d√≠as')) {
    console.log('üìÖ Detectado: hace setenta d√≠as');
    targetDate = new Date(year, month, day - 70);
  } else if (normalizedText.includes('hace ochenta d√≠as')) {
    console.log('üìÖ Detectado: hace ochenta d√≠as');
    targetDate = new Date(year, month, day - 80);
  } else if (normalizedText.includes('hace noventa d√≠as')) {
    console.log('üìÖ Detectado: hace noventa d√≠as');
    targetDate = new Date(year, month, day - 90);
  } else if (normalizedText.includes('martes 14 de octubre')) {
    console.log('üìÖ Detectado: martes 14 de octubre');
    targetDate = new Date(2025, 9, 14); // Octubre es mes 9 (0-indexado)
    console.log('üìÖ Fecha espec√≠fica creada:', targetDate.toLocaleDateString('es-ES'));
  } else if (normalizedText.includes('lunes 15 de octubre')) {
    console.log('üìÖ Detectado: lunes 15 de octubre');
    targetDate = new Date(2025, 9, 15);
  } else if (normalizedText.includes('viernes 18 de octubre')) {
    console.log('üìÖ Detectado: viernes 18 de octubre');
    targetDate = new Date(2025, 9, 18);
  } else if (normalizedText.includes('el d√≠a martes')) {
    console.log('üìÖ Detectado: el d√≠a martes');
    // Buscar el martes m√°s reciente
    const today = new Date(year, month, day);
    const dayOfWeek = today.getDay(); // 0=domingo, 1=lunes, 2=martes, etc.
    const daysToTuesday = dayOfWeek >= 2 ? dayOfWeek - 2 : dayOfWeek + 5; // Martes es d√≠a 2
    targetDate = new Date(year, month, day - daysToTuesday);
  } else if (normalizedText.includes('el lunes pasado')) {
    console.log('üìÖ Detectado: el lunes pasado');
    // Buscar el lunes m√°s reciente
    const today = new Date(year, month, day);
    const dayOfWeek = today.getDay(); // 0=domingo, 1=lunes, 2=martes, etc.
    const daysToMonday = dayOfWeek >= 1 ? dayOfWeek - 1 : dayOfWeek + 6; // Lunes es d√≠a 1
    targetDate = new Date(year, month, day - daysToMonday);
  } else if (normalizedText.includes('mi√©rcoles 15')) {
    console.log('üìÖ Detectado: mi√©rcoles 15');
    // Asumir octubre 2025 (mes actual)
    targetDate = new Date(2025, 9, 15); // Octubre es mes 9 (0-indexado)
    console.log('üìÖ Fecha espec√≠fica creada:', targetDate.toLocaleDateString('es-ES'));
  } else if (normalizedText.includes('martes 14')) {
    console.log('üìÖ Detectado: martes 14');
    targetDate = new Date(2025, 9, 14);
  } else if (normalizedText.includes('lunes 15')) {
    console.log('üìÖ Detectado: lunes 15');
    targetDate = new Date(2025, 9, 15);
  } else if (normalizedText.includes('viernes 18')) {
    console.log('üìÖ Detectado: viernes 18');
    targetDate = new Date(2025, 9, 18);
  } else if (normalizedText.includes('jueves 16')) {
    console.log('üìÖ Detectado: jueves 16');
    targetDate = new Date(2025, 9, 16);
  } else if (normalizedText.includes('s√°bado 19')) {
    console.log('üìÖ Detectado: s√°bado 19');
    targetDate = new Date(2025, 9, 19);
  } else if (normalizedText.includes('domingo 20')) {
    console.log('üìÖ Detectado: domingo 20');
    targetDate = new Date(2025, 9, 20);
  } else if (normalizedText.includes('s√°bado 11')) {
    console.log('üìÖ Detectado: s√°bado 11');
    targetDate = new Date(2025, 9, 11);
  } else if (normalizedText.includes('viernes 10')) {
    console.log('üìÖ Detectado: viernes 10');
    targetDate = new Date(2025, 9, 10);
  } else if (normalizedText.includes('jueves 9')) {
    console.log('üìÖ Detectado: jueves 9');
    targetDate = new Date(2025, 9, 9);
  } else if (normalizedText.includes('mi√©rcoles 8')) {
    console.log('üìÖ Detectado: mi√©rcoles 8');
    targetDate = new Date(2025, 9, 8);
  } else if (normalizedText.includes('martes 7')) {
    console.log('üìÖ Detectado: martes 7');
    targetDate = new Date(2025, 9, 7);
  } else if (normalizedText.includes('lunes 6')) {
    console.log('üìÖ Detectado: lunes 6');
    targetDate = new Date(2025, 9, 6);
  } else if (normalizedText.includes('domingo 5')) {
    console.log('üìÖ Detectado: domingo 5');
    targetDate = new Date(2025, 9, 5);
  } else if (normalizedText.includes('12 de octubre')) {
    console.log('üìÖ Detectado: 12 de octubre');
    targetDate = new Date(2025, 9, 12);
  } else if (normalizedText.includes('13 de octubre')) {
    console.log('üìÖ Detectado: 13 de octubre');
    targetDate = new Date(2025, 9, 13);
  } else if (normalizedText.includes('11 de octubre')) {
    console.log('üìÖ Detectado: 11 de octubre');
    targetDate = new Date(2025, 9, 11);
  } else {
    // Si no se puede procesar o es m√°s de 7 d√≠as, retornar null
    console.log('üìÖ No se pudo procesar la fecha:', dateText);
    return null;
  }
  
  // Verificar que la fecha calculada no sea m√°s de 7 d√≠as atr√°s
  const todayCountry = new Date(year, month, day);
  const daysDiff = Math.floor((todayCountry.getTime() - targetDate.getTime()) / (1000 * 60 * 60 * 24));
  console.log('üìÖ Diferencia en d√≠as:', daysDiff);
  
  if (daysDiff > 7) {
    console.log('‚ùå Fecha m√°s de 7 d√≠as atr√°s, no v√°lida');
    console.log('‚ùå Fecha solicitada:', targetDate.toLocaleDateString('es-ES'));
    console.log('‚ùå Fecha actual:', todayCountry.toLocaleDateString('es-ES'));
    console.log('‚ùå D√≠as de diferencia:', daysDiff);
    // Retornar un objeto especial para indicar error de fecha
    return { error: 'DATE_TOO_OLD', message: 'No puedes agregar transacciones con m√°s de 7 d√≠as de antig√ºedad', daysDiff };
  }
  
  // Formatear como YYYY-MM-DD en zona horaria del pa√≠s
  const result = `${targetDate.getFullYear()}-${String(targetDate.getMonth() + 1).padStart(2, '0')}-${String(targetDate.getDate()).padStart(2, '0')}`;
  console.log('‚úÖ Fecha calculada:', result);
  console.log('‚úÖ Fecha calculada pa√≠s:', targetDate.toLocaleDateString('es-ES'));
  console.log('‚úÖ D√≠a de la semana calculado:', targetDate.toLocaleDateString('es-ES', { weekday: 'long' }));
  return result;
}

export async function processTextWithGroq(text: string, userCountryCode: string = 'BO'): Promise<GroqExtraction | null> {
  if (!text || !text.trim()) return null;
  if (!GROQ_API_KEY) {
    console.warn('‚ö†Ô∏è GROQ_API_KEY no configurada. Saltando procesamiento Groq.');
    return null;
  }

  try {
    const systemPrompt = `Eres un asistente experto en finanzas personales que extrae informaci√≥n de transacciones.

MONEDAS SOPORTADAS (reconoce estas monedas y sus variaciones):
- Boliviano (BOB): "bolivianos", "bs", "boliviano", "bolivianos bolivianos"
- D√≥lar estadounidense (USD): "d√≥lares", "dolares", "usd", "dollar", "dollars", "$"
- Euro (EUR): "euros", "eur", "euro"
- Peso mexicano (MXN): "pesos mexicanos", "pesos", "mxn", "peso mexicano"
- Peso argentino (ARS): "pesos argentinos", "pesos", "ars", "peso argentino"
- Peso chileno (CLP): "pesos chilenos", "pesos", "clp", "peso chileno"
- Sol peruano (PEN): "soles", "pen", "sol peruano", "soles peruanos"
- Peso colombiano (COP): "pesos colombianos", "pesos", "cop", "peso colombiano"

CATEGOR√çAS DISPONIBLES (usa estas como referencia, pero puedes crear otras m√°s espec√≠ficas si es apropiado):
- comida: alimentos, restaurantes, supermercado
- transporte: taxi, bus, gasolina, uber
- educacion: libros, cursos, fotocopias, material escolar
- tecnologia: computadoras, celulares, software
- salud: medicinas, doctores, hospital
- entretenimiento: cine, juegos, deportes
- servicios: luz, agua, internet, telefono
- ropa: vestimenta, zapatos, accesorios
- hogar: muebles, electrodomesticos, limpieza
- otros: cualquier cosa que no encaje en las anteriores

M√âTODOS DE PAGO DISPONIBLES:
- efectivo: pagos en efectivo, dinero en efectivo
- tarjeta: tarjeta de cr√©dito, d√©bito, visa, mastercard
- transferencia: transferencia bancaria, transferencia electr√≥nica
- cheque: cheque, cheque bancario
- crypto: criptomonedas, bitcoin, ethereum
- otro: cualquier otro m√©todo no especificado

DETECCI√ìN DE FECHAS (MUY IMPORTANTE):
SIEMPRE busca palabras que indiquen fechas pasadas en el texto. Si encuentras alguna, incluye el campo "fechaTexto".

PALABRAS CLAVE PARA FECHAS PASADAS:
- "ayer" ‚Üí fechaTexto: "ayer"
- "el d√≠a de ayer" ‚Üí fechaTexto: "ayer"  
- "hace 1 d√≠a" ‚Üí fechaTexto: "hace 1 d√≠a"
- "hace 2 d√≠as" ‚Üí fechaTexto: "hace 2 d√≠as"
- "hace 3 d√≠as" ‚Üí fechaTexto: "hace 3 d√≠as"
- "hace una semana" ‚Üí fechaTexto: "hace una semana"
- "hace dos d√≠as" ‚Üí fechaTexto: "hace 2 d√≠as"

EJEMPLOS OBLIGATORIOS:
- "El d√≠a de ayer me compr√© zapatillas" ‚Üí DEBE incluir fechaTexto: "ayer"
- "Ayer gast√© dinero" ‚Üí DEBE incluir fechaTexto: "ayer"
- "Hace 2 d√≠as compr√© comida" ‚Üí DEBE incluir fechaTexto: "hace 2 d√≠as"

REGLAS ESTRICTAS:
1. SIEMPRE busca palabras de fecha en el texto
2. Si encuentras "ayer", "hace X d√≠as", etc., incluye fechaTexto
3. Si NO hay palabras de fecha, NO incluyas fechaTexto
4. NO calcules fechas exactas, solo extrae el texto de fecha

DETECCI√ìN DE PAGOS DE DEUDAS:
Si el texto menciona pagos de deudas, pr√©stamos o cuentas espec√≠ficas, marca esPagoDeuda: true y extrae el nombre de la deuda.
Ejemplos de pagos de deudas:
- "acabo de pagar 500 bs de la deuda de abed nego" ‚Üí esPagoDeuda: true, nombreDeuda: "abed nego"
- "pagu√© 200 bolivianos de mi pr√©stamo del banco" ‚Üí esPagoDeuda: true, nombreDeuda: "pr√©stamo del banco"
- "cancel√© 100 bs de mi cuenta de la tienda" ‚Üí esPagoDeuda: true, nombreDeuda: "cuenta de la tienda"

INSTRUCCIONES IMPORTANTES:
1. Si encuentras M√öLTIPLES transacciones con DIFERENTES categor√≠as, sep√°ralas
2. Si encuentras una categor√≠a m√°s espec√≠fica y √∫til que las predeterminadas, √∫sala
3. Para fotocopias, libros, cursos ‚Üí usa "educacion" 
4. Para transporte ‚Üí usa "transporte"
5. Para comida ‚Üí usa "comida"
6. Si es algo muy espec√≠fico, crea una categor√≠a descriptiva (ej: "farmacia", "gimnasio", "barberia")
7. Si no se especifica m√©todo de pago, usa "efectivo" por defecto
8. Detecta m√©todos de pago mencionados en el texto (ej: "pagu√© con tarjeta", "transferencia", "en efectivo")
9. DETECTA PAGOS DE DEUDAS: Si menciona pagos de deudas espec√≠ficas, marca esPagoDeuda: true y extrae el nombre
10. RECONOCE TODAS LAS MONEDAS: Detecta cualquier moneda mencionada y extrae el monto correctamente
11. DETECTA FECHAS: Si menciona fechas pasadas o futuras, extrae la fecha y convi√©rtela a formato ISO (YYYY-MM-DD)

EJEMPLOS DE SEPARACI√ìN:
- "Compr√© comida por 20 bolivianos y pagu√© 5 bolivianos de fotocopias" ‚Üí 2 transacciones separadas
- "Gast√© 15 en transporte y 10 en comida" ‚Üí 2 transacciones separadas
- "Compr√© pan por 5 bolivianos, leche por 8 bolivianos y huevos por 12 bolivianos" ‚Üí 1 transacci√≥n (misma categor√≠a)

Devuelve JSON con: transacciones (array), esMultiple (boolean).`;

    const userPrompt = `Analiza esta transacci√≥n: "${text}"

Ejemplos de separaci√≥n de transacciones:
- "Compr√© comida por 20 bolivianos y pagu√© 5 bolivianos de fotocopias" ‚Üí 
  {
    "transacciones": [
      {"monto": 20, "categoria": "comida", "tipo": "gasto", "descripcion": "comida", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null},
      {"monto": 5, "categoria": "educacion", "tipo": "gasto", "descripcion": "fotocopias", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}
    ],
    "esMultiple": true
  }

- "Compr√© pan por 5 bolivianos, leche por 8 bolivianos y huevos por 12 bolivianos" ‚Üí
  {
    "transacciones": [
      {"monto": 25, "categoria": "comida", "tipo": "gasto", "descripcion": "pan, leche y huevos", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}
    ],
    "esMultiple": false
  }

- "Acabo de pagar 500 bolivianos de la deuda de abed nego" ‚Üí
  {
    "transacciones": [
      {"monto": 500, "categoria": "otros", "tipo": "gasto", "descripcion": "pago de deuda", "metodoPago": "efectivo", "esPagoDeuda": true, "nombreDeuda": "abed nego"}
    ],
    "esMultiple": false
  }

Ejemplos con diferentes monedas:
- "Gast√© 50 d√≥lares en comida" ‚Üí {"monto": 50, "categoria": "comida", "tipo": "gasto", "descripcion": "comida", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}
- "Pagu√© 30 euros de transporte" ‚Üí {"monto": 30, "categoria": "transporte", "tipo": "gasto", "descripcion": "transporte", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}
- "Compr√© ropa por 100 pesos mexicanos" ‚Üí {"monto": 100, "categoria": "ropa", "tipo": "gasto", "descripcion": "ropa", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}
- "Ahorr√© 200 soles para mi meta" ‚Üí {"monto": 200, "categoria": "otros", "tipo": "ingreso", "descripcion": "ahorro para meta", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}

Ejemplos con fechas (OBLIGATORIO incluir fechaTexto):
- "El d√≠a de ayer me compr√© zapatillas por 24 bolivianos" ‚Üí {"monto": 24, "categoria": "ropa", "tipo": "gasto", "descripcion": "zapatillas", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null, "fechaTexto": "ayer"}
- "Ayer gast√© 50 bolivianos en comida" ‚Üí {"monto": 50, "categoria": "comida", "tipo": "gasto", "descripcion": "comida", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null, "fechaTexto": "ayer"}
- "Hace 3 d√≠as compr√© ropa por 100 bs" ‚Üí {"monto": 100, "categoria": "ropa", "tipo": "gasto", "descripcion": "ropa", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null, "fechaTexto": "hace 3 d√≠as"}
- "El lunes pasado pagu√© 200 bolivianos de fotocopias" ‚Üí {"monto": 200, "categoria": "educacion", "tipo": "gasto", "descripcion": "fotocopias", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null, "fechaTexto": "hace una semana"}

Ejemplos SIN fechas (NO incluir fechaTexto):
- "Gast√© 50 bolivianos en comida" ‚Üí {"monto": 50, "categoria": "comida", "tipo": "gasto", "descripcion": "comida", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}
- "Compr√© ropa por 100 bs" ‚Üí {"monto": 100, "categoria": "ropa", "tipo": "gasto", "descripcion": "ropa", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}

Devuelve solo JSON v√°lido:`;

    const response = await fetch(GROQ_ENDPOINT, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${GROQ_API_KEY}`
      },
      body: JSON.stringify({
        model: GROQ_MODEL,
        temperature: 0.2,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ]
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Groq API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    const content = data?.choices?.[0]?.message?.content?.trim();
    if (!content) return { raw: data } as GroqExtraction;

    // Intentar parsear JSON
    try {
      const parsed: GroqMultipleResponse = JSON.parse(content);
      console.log('ü§ñ Groq result:', parsed);
      
      // Procesar fechas relativas usando nuestra funci√≥n local
      if (parsed.transacciones.length > 0) {
        parsed.transacciones.forEach(transaction => {
          if (transaction.fechaTexto) {
            const fechaCalculada = processRelativeDate(transaction.fechaTexto, userCountryCode);
            if (fechaCalculada) {
              // Agregar la fecha calculada como 'fecha' para compatibilidad
              (transaction as any).fecha = fechaCalculada;
            }
          }
        });
      }
      
      // Si es m√∫ltiple, devolver la primera transacci√≥n para compatibilidad
      // TODO: Actualizar el modal para manejar m√∫ltiples transacciones
      if (parsed.esMultiple && parsed.transacciones.length > 0) {
        console.log('üîÑ Detectadas m√∫ltiples transacciones:', parsed.transacciones.length);
        return { ...parsed.transacciones[0], raw: data } as GroqExtraction; // Temporal: devolver solo la primera
      } else if (parsed.transacciones.length > 0) {
        return { ...parsed.transacciones[0], raw: data } as GroqExtraction;
      }
      return { raw: data } as GroqExtraction;
    } catch {
      // Si no es JSON puro, intentar extraer bloque JSON
      const match = content.match(/\{[\s\S]*\}/);
      if (match) {
        try {
          const parsed: GroqMultipleResponse = JSON.parse(match[0]);
          console.log('ü§ñ Groq result (extracted):', parsed);
          
          if (parsed.esMultiple && parsed.transacciones.length > 0) {
            console.log('üîÑ Detectadas m√∫ltiples transacciones (extracted):', parsed.transacciones.length);
            return { ...parsed.transacciones[0], raw: data } as GroqExtraction;
          } else if (parsed.transacciones.length > 0) {
            return { ...parsed.transacciones[0], raw: data } as GroqExtraction;
          }
          return { raw: data } as GroqExtraction;
        } catch {
          return { raw: data } as GroqExtraction;
        }
      }
      return { raw: data } as GroqExtraction;
    }
  } catch (err) {
    console.error('‚ùå Error procesando texto con Groq:', err);
    return null;
  }
}

// Nueva funci√≥n para obtener todas las transacciones
async function processTranscriptionMultiple(text: string, userCountryCode: string = 'BO'): Promise<GroqMultipleResponse | null> {
  if (!GROQ_API_KEY) {
    console.warn('‚ö†Ô∏è GROQ_API_KEY no configurada. Saltando procesamiento Groq.');
    return null;
  }

  try {
    const systemPrompt = `üö® INSTRUCCI√ìN CR√çTICA DE FECHAS - LEE ESTO PRIMERO üö®

ANTES DE PROCESAR CUALQUIER TEXTO, DEBES BUSCAR PALABRAS DE FECHA.

PALABRAS DE FECHA QUE DEBES BUSCAR:

FECHAS RELATIVAS:
- "ayer" ‚Üí SIEMPRE incluir fechaTexto: "ayer"
- "el d√≠a de ayer" ‚Üí SIEMPRE incluir fechaTexto: "ayer"
- "hace 1 d√≠a" ‚Üí SIEMPRE incluir fechaTexto: "hace 1 d√≠a"
- "hace 2 d√≠as" ‚Üí SIEMPRE incluir fechaTexto: "hace 2 d√≠as"
- "hace 3 d√≠as" ‚Üí SIEMPRE incluir fechaTexto: "hace 3 d√≠as"
- "hace una semana" ‚Üí SIEMPRE incluir fechaTexto: "hace una semana"

FECHAS ESPEC√çFICAS:
- "martes 14 de octubre" ‚Üí SIEMPRE incluir fechaTexto: "martes 14 de octubre"
- "lunes 15 de octubre" ‚Üí SIEMPRE incluir fechaTexto: "lunes 15 de octubre"
- "viernes 18 de octubre" ‚Üí SIEMPRE incluir fechaTexto: "viernes 18 de octubre"
- "el d√≠a martes" ‚Üí SIEMPRE incluir fechaTexto: "el d√≠a martes"
- "el lunes pasado" ‚Üí SIEMPRE incluir fechaTexto: "el lunes pasado"

EJEMPLOS OBLIGATORIOS:
- "Ayer pagu√© 140 bolivianos" ‚Üí DEBE incluir fechaTexto: "ayer"
- "El d√≠a martes 14 de octubre pagu√© internet" ‚Üí DEBE incluir fechaTexto: "martes 14 de octubre"
- "El lunes pasado compr√© comida" ‚Üí DEBE incluir fechaTexto: "el lunes pasado"
- "Hace 2 d√≠as compr√© comida" ‚Üí DEBE incluir fechaTexto: "hace 2 d√≠as"

REGLAS ESTRICTAS PARA FECHAS:
1. SIEMPRE busca las palabras: "ayer", "hace", "d√≠as", "semana", "lunes", "martes", "mi√©rcoles", "jueves", "viernes", "s√°bado", "domingo", "octubre", "noviembre", "diciembre"
2. Si encuentras CUALQUIERA de estas palabras, incluye fechaTexto
3. NO calcules fechas exactas, solo extrae el texto completo de la fecha
4. Si NO hay palabras de fecha, NO incluyas fechaTexto

---

Eres un asistente experto en finanzas personales que extrae informaci√≥n de transacciones.

MONEDAS SOPORTADAS (reconoce estas monedas y sus variaciones):
- Boliviano (BOB): "bolivianos", "bs", "boliviano", "bolivianos bolivianos"
- D√≥lar estadounidense (USD): "d√≥lares", "dolares", "usd", "dollar", "dollars", "$"
- Euro (EUR): "euros", "eur", "euro"
- Peso mexicano (MXN): "pesos mexicanos", "pesos", "mxn", "peso mexicano"
- Peso argentino (ARS): "pesos argentinos", "pesos", "ars", "peso argentino"
- Peso chileno (CLP): "pesos chilenos", "pesos", "clp", "peso chileno"
- Sol peruano (PEN): "soles", "pen", "sol peruano", "soles peruanos"
- Peso colombiano (COP): "pesos colombianos", "pesos", "cop", "peso colombiano"

CATEGOR√çAS DISPONIBLES (usa estas como referencia, pero puedes crear otras m√°s espec√≠ficas si es apropiado):
- comida: alimentos, restaurantes, supermercado
- transporte: taxi, bus, gasolina, uber
- educacion: libros, cursos, fotocopias, material escolar
- tecnologia: computadoras, celulares, software
- salud: medicinas, doctores, hospital
- entretenimiento: cine, juegos, deportes
- servicios: luz, agua, internet, telefono
- ropa: vestimenta, zapatos, accesorios
- hogar: muebles, electrodomesticos, limpieza
- otros: cualquier cosa que no encaje en las anteriores

TIPOS DE TRANSACCI√ìN:
- gasto: cuando se gasta dinero (comprar, pagar, gastar)
- ingreso: cuando se recibe dinero (vender, cobrar, recibir)

M√âTODOS DE PAGO DISPONIBLES:
- efectivo: dinero en efectivo, billetes, monedas
- tarjeta: tarjeta de cr√©dito, d√©bito, visa, mastercard
- transferencia: transferencia bancaria, pago m√≥vil
- cheque: cheque, cheque bancario
- crypto: criptomonedas, bitcoin, ethereum
- otro: cualquier otro m√©todo no especificado

DETECCI√ìN DE PAGOS DE DEUDAS:
Si el texto menciona pagos de deudas, pr√©stamos o cuentas espec√≠ficas, marca esPagoDeuda: true y extrae el nombre de la deuda.
Ejemplos de pagos de deudas:
- "acabo de pagar 500 bs de la deuda de abed nego" ‚Üí esPagoDeuda: true, nombreDeuda: "abed nego"
- "pagu√© 200 bolivianos de mi pr√©stamo del banco" ‚Üí esPagoDeuda: true, nombreDeuda: "pr√©stamo del banco"
- "cancel√© 100 bs de mi cuenta de la tienda" ‚Üí esPagoDeuda: true, nombreDeuda: "cuenta de la tienda"

INSTRUCCIONES IMPORTANTES:
1. Extrae el monto exacto mencionado
2. Identifica la categor√≠a m√°s apropiada
3. Determina si es gasto o ingreso
4. Extrae la descripci√≥n del producto/servicio
5. Identifica el m√©todo de pago (por defecto "efectivo" si no se especifica)
6. RECONOCE TODAS LAS MONEDAS: Detecta cualquier moneda mencionada y extrae el monto correctamente
7. SEPARA TRANSACCIONES: Si hay m√∫ltiples compras con diferentes categor√≠as, sep√°ralas en transacciones individuales
8. DETECTA PAGOS DE DEUDA: Si menciona pagar una deuda espec√≠fica, marca esPagoDeuda: true y extrae el nombre de la deuda

FORMATO DE RESPUESTA:
Devuelve SOLO un JSON v√°lido con la siguiente estructura. NO incluyas texto explicativo, an√°lisis, o comentarios. SOLO el JSON.

{
  "transacciones": [
    {
      "monto": n√∫mero,
      "categoria": "string",
      "tipo": "gasto" o "ingreso",
      "descripcion": "string",
      "metodoPago": "string",
      "esPagoDeuda": boolean,
      "nombreDeuda": "string" o null,
      "fechaTexto": "string" o null
    }
  ],
  "esMultiple": boolean
}

IMPORTANTE: Responde √öNICAMENTE con el JSON. No agregues texto antes, despu√©s, o explicaciones.`;

    const userPrompt = `Analiza esta transacci√≥n: "${text}"

IMPORTANTE: Responde √öNICAMENTE con el JSON. No agregues texto explicativo, an√°lisis, o comentarios.

Ejemplos de separaci√≥n de transacciones:
- "Compr√© comida por 20 bolivianos y pagu√© 5 bolivianos de fotocopias" ‚Üí 
  {
    "transacciones": [
      {"monto": 20, "categoria": "comida", "tipo": "gasto", "descripcion": "comida", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null},
      {"monto": 5, "categoria": "educacion", "tipo": "gasto", "descripcion": "fotocopias", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}
    ],
    "esMultiple": true
  }

- "Compr√© pan por 5 bolivianos, leche por 8 bolivianos y huevos por 12 bolivianos" ‚Üí
  {
    "transacciones": [
      {"monto": 25, "categoria": "comida", "tipo": "gasto", "descripcion": "pan, leche y huevos", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}
    ],
    "esMultiple": false
  }

- "Acabo de pagar 500 bolivianos de la deuda de abed nego" ‚Üí
  {
    "transacciones": [
      {"monto": 500, "categoria": "otros", "tipo": "gasto", "descripcion": "pago de deuda", "metodoPago": "efectivo", "esPagoDeuda": true, "nombreDeuda": "abed nego"}
    ],
    "esMultiple": false
  }

Ejemplos con diferentes monedas:
- "Gast√© 50 d√≥lares en comida" ‚Üí {"monto": 50, "categoria": "comida", "tipo": "gasto", "descripcion": "comida", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}
- "Pagu√© 30 euros de transporte" ‚Üí {"monto": 30, "categoria": "transporte", "tipo": "gasto", "descripcion": "transporte", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}
- "Compr√© ropa por 100 pesos mexicanos" ‚Üí {"monto": 100, "categoria": "ropa", "tipo": "gasto", "descripcion": "ropa", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}
- "Ahorr√© 200 soles para mi meta" ‚Üí {"monto": 200, "categoria": "otros", "tipo": "ingreso", "descripcion": "ahorro para meta", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}

Ejemplos con fechas (OBLIGATORIO incluir fechaTexto):
- "El d√≠a de ayer me compr√© zapatillas por 24 bolivianos" ‚Üí {"monto": 24, "categoria": "ropa", "tipo": "gasto", "descripcion": "zapatillas", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null, "fechaTexto": "ayer"}
- "Ayer gast√© 50 bolivianos en comida" ‚Üí {"monto": 50, "categoria": "comida", "tipo": "gasto", "descripcion": "comida", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null, "fechaTexto": "ayer"}
- "Hace 3 d√≠as compr√© ropa por 100 bs" ‚Üí {"monto": 100, "categoria": "ropa", "tipo": "gasto", "descripcion": "ropa", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null, "fechaTexto": "hace 3 d√≠as"}
- "El lunes pasado pagu√© 200 bolivianos de fotocopias" ‚Üí {"monto": 200, "categoria": "educacion", "tipo": "gasto", "descripcion": "fotocopias", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null, "fechaTexto": "hace una semana"}

Ejemplos SIN fechas (NO incluir fechaTexto):
- "Gast√© 50 bolivianos en comida" ‚Üí {"monto": 50, "categoria": "comida", "tipo": "gasto", "descripcion": "comida", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}
- "Compr√© ropa por 100 bs" ‚Üí {"monto": 100, "categoria": "ropa", "tipo": "gasto", "descripcion": "ropa", "metodoPago": "efectivo", "esPagoDeuda": false, "nombreDeuda": null}

Devuelve solo JSON v√°lido:`;

    const response = await fetch(GROQ_ENDPOINT, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${GROQ_API_KEY}`
      },
      body: JSON.stringify({
        model: GROQ_MODEL,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ]
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Groq API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('ü§ñ Groq API response recibida:', data);
    const content = data?.choices?.[0]?.message?.content?.trim();
    console.log('ü§ñ Groq content extra√≠do:', content);
    if (!content) {
      console.log('‚ùå No hay contenido en la respuesta de Groq');
      return null;
    }

    // Intentar parsear JSON
    try {
      console.log('üîÑ Intentando parsear JSON de Groq...');
      const parsed: GroqMultipleResponse = JSON.parse(content);
      console.log('ü§ñ Groq multiple result:', parsed);
      console.log('ü§ñ Groq raw response:', JSON.stringify(parsed, null, 2));
      
      // Procesar fechas relativas usando nuestra funci√≥n local
      console.log('üîÑ Iniciando procesamiento de fechas...');
      console.log('üìä Total transacciones a procesar:', parsed.transacciones.length);
      
      if (parsed.transacciones.length > 0) {
        parsed.transacciones.forEach((transaction, index) => {
          console.log(`üìÖ Procesando transacci√≥n ${index + 1}:`, transaction);
          console.log(`üìÖ ¬øTiene fechaTexto?`, !!transaction.fechaTexto);
          console.log(`üìÖ fechaTexto valor:`, transaction.fechaTexto);
          console.log(`üìÖ Tipo de fechaTexto:`, typeof transaction.fechaTexto);
          
          if (transaction.fechaTexto) {
            console.log('üìÖ FechaTexto detectada:', transaction.fechaTexto);
            console.log('üîÑ Llamando a processRelativeDate...');
            const fechaCalculada = processRelativeDate(transaction.fechaTexto, userCountryCode);
            console.log('üìÖ Resultado de processRelativeDate:', fechaCalculada);
            
            if (typeof fechaCalculada === 'string') {
              console.log('üìÖ Fecha calculada:', fechaCalculada);
              // Agregar la fecha calculada como 'fecha' para compatibilidad
              (transaction as any).fecha = fechaCalculada;
              console.log('üìÖ Transacci√≥n actualizada:', transaction);
              console.log('üìÖ Verificando fecha en transacci√≥n:', (transaction as any).fecha);
            } else if (fechaCalculada && typeof fechaCalculada === 'object' && 'error' in fechaCalculada) {
              console.log('‚ùå Error de fecha:', fechaCalculada.message);
              console.log('‚ùå D√≠as de diferencia:', fechaCalculada.daysDiff);
              // Marcar la transacci√≥n con error de fecha
              (transaction as any).fechaError = fechaCalculada;
            } else {
              console.log('‚ùå No se pudo calcular la fecha');
            }
          } else {
            console.log('üìÖ No hay fechaTexto en la transacci√≥n');
            console.log('üìÖ Campos disponibles:', Object.keys(transaction));
            console.log('üìÖ Contenido completo de la transacci√≥n:', JSON.stringify(transaction, null, 2));
          }
        });
      } else {
        console.log('‚ùå No hay transacciones para procesar');
      }
      
      console.log('‚úÖ Procesamiento de fechas completado');
      console.log('üìä Transacciones finales:', parsed.transacciones);
      
      return parsed;
    } catch {
      // Si no es JSON puro, intentar extraer bloque JSON
      const match = content.match(/\{[\s\S]*\}/);
      if (match) {
        try {
          const parsed: GroqMultipleResponse = JSON.parse(match[0]);
          console.log('ü§ñ Groq multiple result (extracted):', parsed);
          return parsed;
        } catch {
          return null;
        }
      }
      return null;
    }
  } catch (err) {
    console.error('‚ùå Error procesando texto con Groq:', err);
    return null;
  }
}

// Extensi√≥n: Procesar con contexto por pa√≠s desde Supabase
export async function extractExpenseWithCountryContext(
  transcripcion: string,
  countryCode: string
): Promise<GroqExtraction | null> {
  try {
    // Importar servicios din√°micamente (solo en servidor)
    const { getCountryRules } = await import('@/lib/countryRules');
    
    // 1. Obtener reglas del pa√≠s
    const rules = await getCountryRules(countryCode);
    console.log(`üåç Using rules for: ${rules.country_name}`);

    // 2. Construir contexto local con slang y palabras clave
    let contextoLocal = '';
    if (rules.ejemplos && rules.ejemplos.length > 0) {
      contextoLocal = rules.ejemplos
        .map(regla => {
          const slangKeys = Object.keys(regla.slang || {});
          const palabrasKeys = Object.keys(regla.palabras_clave || {});
          
          if (slangKeys.length > 0 || palabrasKeys.length > 0) {
            return `En ${countryCode}, categor√≠a ${regla.categoria}: ${palabrasKeys.join(', ')}. ${slangKeys.map(k => `${k} = ${regla.slang[k]}`).join('; ')}`;
          }
          return '';
        })
        .filter(Boolean)
        .join('\n');
    }

    // 3. Si hay contexto local, agregarlo al principio de la transcripci√≥n
    let transcripcionConContexto = transcripcion;
    if (contextoLocal) {
      console.log('üåç Aplicando contexto local:', contextoLocal);
      transcripcionConContexto = `Contexto local: ${contextoLocal}\n\nTranscripci√≥n: ${transcripcion}`;
    }

    // 4. Usar el servicio Groq existente con el contexto adicional
    const resultado = await processTextWithGroq(transcripcionConContexto, countryCode);

    // 5. Devolver resultado (el formato ya es el mismo que usa la app)
    return resultado;

  } catch (error: any) {
    console.error('Error in extractExpenseWithCountryContext:', error);
    
    // Fallback: usar funci√≥n base sin contexto
    return processTextWithGroq(transcripcion, countryCode);
  }
}

export const groqService = {
  processTranscription: processTextWithGroq,
  processTranscriptionMultiple: processTranscriptionMultiple,
  extractExpenseWithCountryContext: extractExpenseWithCountryContext
};


